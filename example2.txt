让我们重新开始探索用我们的计算资源处理大量文本的方法.我们在 1.1 节已经开始讨论了,在那里我们看到如何搜索词及其上下文,如何汇编一个文本中的词汇,如何产生一种文体的随机文本等。在本节中,我们重新拾起是什么让一个文本不同与其他文本这样的问题,并使用程序自动寻找特征词汇和文字表达。正如在 1.1 节中那样,你可以通过复制它们到 Python 解释器中来尝试 Python 语言的新特征,你将在下一节中系统的了解这些功能。在这之前,你可能会想通过预测下面的代码的输出来检查你对上一节的理解。你可以使用解释器来检查你是否正确。如果你不确定如何做这个任务,你最好在继续之前复习一下上一节的内容。电子表格通常用于获取词表或范式。例如:一个比较词表可以用电子表格创建,用一排
表示每个同源组,每种语言一列(见 nltk.corpus.swadesh 和 www.rosettaproject.or
g)
。大多数电子表格软件可以将数据导出为 CSV 格式。正如我们将在下面看到的,使用 c
sv 模块 Python 程序可以很容易的访问它们。
有时词典存储在一个完全成熟的关系数据库。
经过适当的标准化,
这些数据库可以确保
数据的有效性。例如:我们可以要求所有词性都来自指定的词汇,通过声明词性字段为枚举
类型或用一个外键引用一个单独的词性表。然而,关系模型需要提前定义好的数据(模式)
结构,
这与高度探索性的构造语言数据的主导方法相违背。
被认为是强制性的和独特的字段
往往需要是可选的、可重复。只有当数据类型提前全都知道时关系数据库才是适用的。如果
不是,或者几乎所有的属性都是可选的或重复的,关系的做法就行不通了。
然而,当我们的目标只是简单的从数据库中提取内容时,完全可以将表格(或 SQL 查
询结果)转换成 CSV 格式,并加载到我们的程序中。我们的程序可能会执行不太容易用 S
QL 表示的语言学目的的查询,如:select all words that appear in example sentences for
which no dictionary entry is provided。对于这个任务,我们需要从记录中提取足够的信息,
使它连同词条和例句能被唯一的识别。让我们假设现在这个信息是在一个 CSV 文件 dict.cs
v 中
我们一直在各种文本和 Python 编程语言的帮助自下而上的探索语言。然而,我们也对
通过构建有用的语言技术,开拓我们的语言和计算知识感兴趣。现在,我们将借此机会从代
码的细节中退出来,描绘一下自然语言处理的全景图。
纯粹应用层面,
我们大家都需要帮助才能在网络上的文本中找到有用的信息。
搜索引擎
在网络的发展和普及中发挥了关键作用,但也有一些缺点。它需要技能、知识和一点运气才
能找到这样一些问题的答案:我用有限的预算能参观费城和匹兹堡的哪些景点? ”,专家们
“
“
怎么评论数码单反相机?”,过去的一周里可信的评论员都对钢材市场做了哪些预测?”。
“
让
计算机来自动回答这些问题,涉及包括信息提取、推理与总结在内的广泛的语言处理任务,
将需要在一个更大规模更稳健的层面实施,这超出了我们当前的能力。
哲学层面,
构建智能机器是人工智能长久以来的挑战,
语言理解是智能行为的重要组成
部分。这一目标多年来一直被看作是太困难了。然而,随着 NLP 技术日趋成熟,分析非结
构化文本的方法越来越健壮,
应用越来越广泛,
对自然语言理解的期望变成一个合理的目标
再次浮现。
在本节中,我们将描述一些语言理解技术,给你一种有趣的挑战正在等着你的感觉。

